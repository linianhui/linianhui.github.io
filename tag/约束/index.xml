<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>约束 on Timetombs</title><link>https://linianhui.github.io/tag/%E7%BA%A6%E6%9D%9F/</link><description>Recent content in 约束 on Timetombs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Nov 2022 14:49:58 +0800</lastBuildDate><atom:link href="https://linianhui.github.io/tag/%E7%BA%A6%E6%9D%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>[程序设计语言] 02 [核心概念] 名字、作用域和约束(Bindings)</title><link>https://linianhui.github.io/programming-language/02-names-scopes-and-bindings/</link><pubDate>Sun, 03 Aug 2014 09:09:00 +0800</pubDate><guid>https://linianhui.github.io/programming-language/02-names-scopes-and-bindings/</guid><description>&lt;h1 id="names-and-binding-time">
&lt;i id="locator-names-and-binding-time" class="header-locator">&lt;/i>
&lt;a href="#names-and-binding-time" class="article-h-a">1 名字、约束时间(Binding Time)&lt;/a>
&lt;/h1>
&lt;p>在本篇博文开始前先介绍两个约定：第一个是&lt;strong>对象&lt;/strong>，除非在介绍面向对象语言时，本系列中出现的对象均是指任何可以有名字的东西，比如变量、常量、类型、子程序、模块等等。第二个是&lt;strong>抽象的&lt;/strong>，因为我们讨论的是语言的核心概念，所以&lt;strong>抽象的&lt;/strong>具体指代的是语言特征与任何计算机体系结构分离的程度。&lt;/p>
&lt;p>如果可以给名字下个定义，那么它是代表某东西的一些助记字符序列。就好比张三、李四，对应到大部分语言中一般可以等价为&lt;strong>标识符&lt;/strong>。名字可以让我们用一个符号来表示变量、子程序、类型等等，其实名字就是一种抽象，比如一个变量名就帮助我们隐藏了背后的一些存储相关的复杂细节、子程序是控制抽象(帮助我们隐藏一个复杂的代码逻辑处理过程)、面向对象中的类属于数据抽象(把对数据的复杂操作逻辑隐藏到一系列方法背后)等等。&lt;/p></description></item></channel></rss>