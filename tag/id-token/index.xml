<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Id Token on Timetombs</title><link>https://linianhui.github.io/tag/id-token/</link><description>Recent content in Id Token on Timetombs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Nov 2022 14:49:58 +0800</lastBuildDate><atom:link href="https://linianhui.github.io/tag/id-token/index.xml" rel="self" type="application/rss+xml"/><item><title>[认证&amp;授权] 04 OIDC(OpenId Connect)身份认证(核心部分)</title><link>https://linianhui.github.io/authentication-and-authorization/04-openid-connect-core/</link><pubDate>Tue, 30 May 2017 09:18:00 +0800</pubDate><guid>https://linianhui.github.io/authentication-and-authorization/04-openid-connect-core/</guid><description>&lt;h1 id="what-is-oidc">
&lt;i id="locator-what-is-oidc" class="header-locator">&lt;/i>
&lt;a href="#what-is-oidc" class="article-h-a">1 什么是OIDC？&lt;/a>
&lt;/h1>
&lt;p>看一下官方的介绍(&lt;a href="http://openid.net/connect/"

 target="_blank" rel="noopener norefferrer">http://openid.net/connect/&lt;/a>) :&lt;/p>
&lt;blockquote>
&lt;p>OpenID Connect 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It allows Clients to verify the identity of the End-User based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the End-User in an interoperable and REST-like manner.&lt;/p>
&lt;p>OpenID Connect allows clients of all types, including Web-based, mobile, and JavaScript clients, to request and receive information about authenticated sessions and end-users. The specification suite is extensible, allowing participants to use optional features such as encryption of identity data, discovery of OpenID Providers, and session management, when it makes sense for them.&lt;/p>&lt;/blockquote>
&lt;p>简单来说 : OIDC是OpenID Connect的简称，&lt;code>OIDC=(Identity, Authentication) + OAuth 2.0&lt;/code>。它在OAuth2上构建了一个身份层，是一个基于OAuth2协议的身份认证标准协议。我们都知道OAuth2是一个授权协议，它无法提供完善的身份认证功能(关于这一点请参考&lt;a href="../03-user-authentication-with-oauth2/"

 target="_blank" rel="noopener norefferrer">[认证&amp;amp;授权] 03 使用OAuth2进行用户认证(译)&lt;/a>)，OIDC使用OAuth2的授权服务器来为第三方客户端提供用户的身份认证，并把对应的身份认证信息传递给客户端，且可以适用于各种类型的客户端(比如服务端应用，移动APP，JS应用)，且完全兼容OAuth2，也就是说你搭建了一个OIDC的服务后，也可以当作一个OAuth2的服务来用。应用场景如图 :&lt;br />
&lt;img src="oidc-use-for.png" loading="lazy" decoding="auto" alt="OIDC 应用场景" title="OIDC 应用场景"/>&lt;/p></description></item><item><title>[认证&amp;授权] 06 Permission Based Access Control</title><link>https://linianhui.github.io/authentication-and-authorization/06-permission-based-access-control/</link><pubDate>Sat, 13 Jan 2018 15:23:00 +0800</pubDate><guid>https://linianhui.github.io/authentication-and-authorization/06-permission-based-access-control/</guid><description>&lt;p>在前面5篇博客中介绍了OAuth2和OIDC(OpenId Connect)，其作用是授权和认证。那么当我们得到OAuth2的&lt;code>Access Token&lt;/code>或者OIDC的&lt;code>Id Token&lt;/code>之后，我们的&lt;strong>资源服务&lt;/strong>如何来验证这些token是否有权限来执行对资源的某一项操作呢？比如我有一个API &lt;code>/book&lt;/code>，它具有如下5个操作 :&lt;/p>
&lt;ol>
&lt;li>POST /book : 添加一本书&lt;/li>
&lt;li>GET /book/{id} : 获取一本书&lt;/li>
&lt;li>PUT /book/{id} : 更新一本书&lt;/li>
&lt;li>DELETE /book/{id} : 删除一本书&lt;/li>
&lt;li>GET /book : 获取书的列表&lt;/li>
&lt;/ol>
&lt;p>其伪代码如下 :&lt;/p></description></item><item><title>[认证&amp;授权] 05 OIDC(OpenId Connect)身份认证(扩展部分)</title><link>https://linianhui.github.io/authentication-and-authorization/05-openid-connect-extension/</link><pubDate>Thu, 16 Nov 2017 13:39:00 +0800</pubDate><guid>https://linianhui.github.io/authentication-and-authorization/05-openid-connect-extension/</guid><description>&lt;p>在上一篇&lt;a href="../04-openid-connect-core/"

 target="_blank" rel="noopener norefferrer">[认证&amp;amp;授权] 04 OIDC(OpenId Connect)身份认证(核心部分)&lt;/a>中解释了OIDC的核心部分的功能，即OIDC如何提供&lt;code>id_token&lt;/code>来用于认证。由于OIDC是一个协议族，如果只是简单的只关注其核心部分其实是不足以搭建一个完整的OIDC服务的。本篇则解释下OIDC中比较常用的几个相关扩展协议，可以说是搭建OIDC服务必备的几个扩展协议(在上一篇中有提到这几个协议规范):&lt;/p></description></item></channel></rss>