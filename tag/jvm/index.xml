<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JVM on Timetombs</title><link>https://linianhui.github.io/tag/jvm/</link><description>Recent content in JVM on Timetombs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Nov 2022 14:49:58 +0800</lastBuildDate><atom:link href="https://linianhui.github.io/tag/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>[Java] JVM(Java Virtual Machine)</title><link>https://linianhui.github.io/java/jvm/</link><pubDate>Wed, 04 Mar 2020 19:32:01 +0800</pubDate><guid>https://linianhui.github.io/java/jvm/</guid><description>&lt;p>Java是一个跨平台的语言，当初的口号&lt;strong>编译一次，到处运行&lt;/strong>。那么它是如何实现跨平台运行的呢？计算机领域有个有个著名的定理&lt;strong>中间层定律&lt;/strong>：计算机科学领域的任何问题都可以通过增加一个中间层来解决。那么Java的跨平台也不例外，它就是通过添加了一个中间层来解决跨平台运行的问题的。&lt;/p>
&lt;p>我们知道计算机是无法直接运行我们编写的程序设计语言&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>的代码的，需要编译为计算机可理解的特定底层汇编或者机器码指令才可以。所以Java从诞生之初就没有编译成平台相关的代码，而是编译为了平台无关的&lt;code>bytecode&lt;/code>字节码（文件扩展名&lt;code>.class&lt;/code>）。然后交由Java虚拟机JVM(Java Virtual Machine)来执行字节码文件，而JVM则需要在每个支持的平台上独立的编写，由它充当我们的&lt;strong>中间层&lt;/strong>，以此达到我们编写的代码跨平台运行的目的。&lt;/p></description></item></channel></rss>