<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架构属性 on Timetombs</title><link>https://linianhui.github.io/tag/%E6%9E%B6%E6%9E%84%E5%B1%9E%E6%80%A7/</link><description>Recent content in 架构属性 on Timetombs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Nov 2022 14:49:58 +0800</lastBuildDate><atom:link href="https://linianhui.github.io/tag/%E6%9E%B6%E6%9E%84%E5%B1%9E%E6%80%A7/index.xml" rel="self" type="application/rss+xml"/><item><title>[理解REST] 03 基于网络应用的架构</title><link>https://linianhui.github.io/understand-rest/03-network-based-software-architecture/</link><pubDate>Sun, 17 Sep 2017 16:58:00 +0800</pubDate><guid>https://linianhui.github.io/understand-rest/03-network-based-software-architecture/</guid><description>&lt;p>链接上文&lt;a href="../02-what-is-rest-used-for/"

 target="_blank" rel="noopener norefferrer">[理解REST] 02 REST是用来干什么的？&lt;/a>，上文中解释到什么是架构风格和应该以怎样的视角来理解REST(Web的架构风格)。本篇来介绍一组自洽的术语，用它来描述和解释软件架构；以及列举下对于基于网络的应用来说，哪些点是需要我们重点关注的。&lt;/p>
&lt;h1 id="software-architecture">
&lt;i id="locator-software-architecture" class="header-locator">&lt;/i>
&lt;a href="#software-architecture" class="article-h-a">1 软件架构&lt;/a>
&lt;/h1>
&lt;p>软件架构方面关注的是如何以最佳的方式划分一个系统、如何标识组件、组件之间如何通信、信息如何表达、组成系统的元素如何独立的进化，以及如何表达上述的内容。一个优秀的软件架构并非凭空靠想象得来的，每一个架构级的决策，都应该根据被设计的系统功能、行为和社交三方面的需求而作出。这是一个基本的设计原则，即 &lt;strong>&amp;quot;形式追随功能&amp;quot;&lt;/strong> ，这条原则源自于建筑学领域在数百年中失败的建筑项目中获得的经验，但是却总被软件行业所忽略。&lt;strong>&amp;quot;dedign-by-buzzword&amp;quot;&lt;/strong> 的行为随处可见，出现这种行为的原因在于很多设计者在选择某一个优秀的软件架构时，不了解这个架构的适用场景是什么、背后是基于什么考量才得出的这样的架构，以及是否吻合自己的需求。下面先介绍一组自洽的术语来描述解释软件架构。&lt;/p></description></item></channel></rss>