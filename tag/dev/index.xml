<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dev on Timetombs</title><link>https://linianhui.github.io/tag/dev/</link><description>Recent content in Dev on Timetombs</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 20 Nov 2022 14:49:58 +0800</lastBuildDate><atom:link href="https://linianhui.github.io/tag/dev/index.xml" rel="self" type="application/rss+xml"/><item><title>[Redis] 运行时架构</title><link>https://linianhui.github.io/redis/runtime-architecture/</link><pubDate>Fri, 19 Mar 2021 20:12:24 +0800</pubDate><guid>https://linianhui.github.io/redis/runtime-architecture/</guid><description>&lt;p>redis自从诞生之处就被称之为单线程的方式实现的，这里的单线程指的是&lt;code>socket read&lt;/code>、&lt;code>解析&lt;/code>、&lt;code>执行&lt;/code>和&lt;code>socket write&lt;/code>这四个阶段都是由主线程独自完成的。当然一个redis-server实例并不是只有这一个线程，比如还有执行RDB、AOF、LRU、AOFREWRITE等等后台线程，只是它们的运行不会参与到server的主线程处理client的request这个流程中。&lt;/p></description></item><item><title>[Redis] lua script</title><link>https://linianhui.github.io/redis/lua/</link><pubDate>Fri, 19 Mar 2021 20:11:22 +0800</pubDate><guid>https://linianhui.github.io/redis/lua/</guid><description>&lt;p>redis2.6+在server端内嵌了&lt;code>lua&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>的支持，可以执行client发送的自定义的&lt;code>lua script&lt;/code>，使得一些操作逻辑可以放到server上来执行，有利于减少一些不必要的网络交互，从而提升性能。在架构风格上这隶属于&lt;code>COD(Code On Demand)按需代码&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>，类似于&lt;code>REST&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>的六大架构约束之一的&lt;code>COD&lt;/code>约束&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>，但是不同的是，这里的COD是运行在server端的。&lt;/p>
&lt;h1 id="command">
&lt;i id="locator-command" class="header-locator">&lt;/i>
&lt;a href="#command" class="article-h-a">1 命令&lt;/a>
&lt;/h1>
&lt;p>执行lua script的主要是&lt;code>EVAL&lt;/code>&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>和&lt;code>EVALSHA&lt;/code>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>。&lt;/p>
&lt;ol>
&lt;li>&lt;code>EVAL script numkeys key [key ...] arg [arg ...]&lt;/code>。&lt;/li>
&lt;li>&lt;code>EVALSHA sha1 numkeys key [key ...] arg [arg ...]&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>两者的唯一不同是第一个参数的差异，EVAL的第一个参数是script本身，而EVALSHA的第一个参数则是script的sha1的值。因为redis-server会在第一次执行script时进行缓存，缓存的唯一标识是script的sha1，如果script一直没有任何变化，那么后续的所有命令，都可以用这个sha1来代替体积更大的script本身，这样可以有效的减少不必要的网络传输。&lt;/p></description></item><item><title>[Redis] expire</title><link>https://linianhui.github.io/redis/expire/</link><pubDate>Fri, 19 Mar 2021 19:52:12 +0800</pubDate><guid>https://linianhui.github.io/redis/expire/</guid><description>&lt;p>因为redis通常主要用来作为一个缓存服务。缓存何时失效的问题号称是计算机科学领域两大难题之一（另一个是命名），这一篇文章就介绍下笔者对于缓存如何以及何时失效的问题理解。&lt;/p>
&lt;h1 id="delete-way">
&lt;i id="locator-delete-way" class="header-locator">&lt;/i>
&lt;a href="#delete-way" class="article-h-a">1 过期删除方式&lt;/a>
&lt;/h1>
&lt;p>redis支持通过两种方式清理过期的key&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>：&lt;/p>
&lt;ol>
&lt;li>被动删除。&lt;/li>
&lt;li>主动删除。&lt;/li>
&lt;/ol>
&lt;h2 id="passive-delete">
&lt;i id="locator-passive-delete" class="header-locator">&lt;/i>
&lt;a href="#passive-delete" class="article-h-a">1.1 被动删除&lt;/a>
&lt;/h2>
&lt;p>在client访问(任意读写操作)一个key时，如果key设置了过期时间，则在访问时删除它们。如果没有主动设置过期时间，那么key则是会一直不会过期的。&lt;/p></description></item><item><title>[Redis] pipelining</title><link>https://linianhui.github.io/redis/pipelining/</link><pubDate>Fri, 19 Mar 2021 19:51:12 +0800</pubDate><guid>https://linianhui.github.io/redis/pipelining/</guid><description>&lt;h1 id="issue">
&lt;i id="locator-issue" class="header-locator">&lt;/i>
&lt;a href="#issue" class="article-h-a">1 问题分析&lt;/a>
&lt;/h1>
&lt;p>设想一下有这样一个场景。在一个&lt;code>RTT&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>为10ms的网络环境下，循环执行一个&lt;code>INCR xxkey&lt;/code>的操作，假定redis-server每次耗时1ms。&lt;/p>
&lt;p>当cleint发出&lt;code>INCR xxkey&lt;/code>的命令后，要等11ms后才能收到响应。如果循环100次，则总共就需要&lt;code>1100ms&lt;/code>。显然redis-server执行100次仅需要&lt;code>1ms*100=100ms&lt;/code>，而消耗在&lt;code>RTT&lt;/code>&lt;sup id="fnref1:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>上所需的时间为&lt;code>10ms*100=1000ms&lt;/code>。网络延迟消耗了太多的时间。&lt;/p>
&lt;blockquote>
&lt;p>redis的基本通信模型是request/response。即client1发送一个request1，然后等待server处理完后的response1。在这个期间，server也是处于阻塞状态的，也就是说这时你又来另外一个client2的request2，那么这个request2也需要等待server1处理完response1后才能继续处理。&lt;/p></description></item><item><title>[Redis] data type</title><link>https://linianhui.github.io/redis/data-type/</link><pubDate>Fri, 19 Mar 2021 19:50:23 +0800</pubDate><guid>https://linianhui.github.io/redis/data-type/</guid><description>&lt;p>redis支持丰富的数据类型&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。我们这里从两个角度来介绍：&lt;/p>
&lt;ol>
&lt;li>client使用：client可以使用到的数据类型。&lt;/li>
&lt;li>server实现：server内部的具体实现。&lt;/li>
&lt;/ol>
&lt;h1 id="client">
&lt;i id="locator-client" class="header-locator">&lt;/i>
&lt;a href="#client" class="article-h-a">1 client使用&lt;/a>
&lt;/h1>
&lt;h2 id="string">
&lt;i id="locator-string" class="header-locator">&lt;/i>
&lt;a href="#string" class="article-h-a">1.1 String&lt;/a>
&lt;/h2>
&lt;p>string是一个&lt;strong>二进制安全的&lt;/strong>字符串，类似于java的String，但是它是可以修改的。value最大长度不能超过&lt;strong>512MB&lt;/strong>。&lt;/p>
&lt;p>redis中的key是string类型的，key的命名规则的通常采用&lt;code>:&lt;/code>分割的具有层级结构的形式，比如&lt;code>account:1001:followers&lt;/code>。&lt;/p></description></item><item><title>[Redis] resp</title><link>https://linianhui.github.io/redis/resp/</link><pubDate>Fri, 19 Mar 2021 13:07:23 +0800</pubDate><guid>https://linianhui.github.io/redis/resp/</guid><description>&lt;p>因为Redis是基于网络的分布式缓存服务，所以其隶属于&lt;code>客户端-服务器架构风格&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。这就使得它必须通过网络进行通信，那么其客户端和服务端所采取的&lt;code>应用层协议&lt;/code>为&lt;code>RESP(REdis Serialization Protocol)&lt;/code>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。底层的传输协议为&lt;code>TCP&lt;/code>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>，端口号6379。&lt;/p>
&lt;h1 id="request-response-model">
&lt;i id="locator-request-response-model" class="header-locator">&lt;/i>
&lt;a href="#request-response-model" class="article-h-a">1 请求/响应模型&lt;/a>
&lt;/h1>
&lt;p>Client发送各种命令给Server，Server接收命令并处理后把响应消息发回Client。有两种例外的情况：&lt;/p>
&lt;ol>
&lt;li>pipelining : Client一次性的发送多个命令。&lt;/li>
&lt;li>Pub/Sub：Server会改成推送方式，即无需Client发送请求，而是Server主动推送。&lt;/li>
&lt;/ol>
&lt;h1 id="application-protocal">
&lt;i id="locator-application-protocal" class="header-locator">&lt;/i>
&lt;a href="#application-protocal" class="article-h-a">2 应用层协议&lt;/a>
&lt;/h1>
&lt;p>&lt;code>RESP&lt;/code>&lt;sup id="fnref1:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>致力于一下三个目标：&lt;/p></description></item></channel></rss>